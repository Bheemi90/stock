{"ast":null,"code":"/**\n * Converts a Date Object to a UNIX timestamp\n * @param {Date} date - The Date Object to be converted\n * @param {number} unixTimestamp The corresponding UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n */export var convertDateToUnixTimestamp=function convertDateToUnixTimestamp(date){return Math.floor(date.getTime()/1000);};/**\n * Converts a UNIX timestamp to a Date\n * @param {number} unixTimestamp - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n * @returns {string} The corresponding Date Object formatted as a string\n */export var convertUnixTimestampToDate=function convertUnixTimestampToDate(unixTimestamp){var milliseconds=unixTimestamp*1000;return new Date(milliseconds).toLocaleDateString();};/**\n * Creates a new date by adding days/weeks/months/years to a given date. Negative values will also work (for past dates)\n * @param {Date} date - The specified date\n * @param {number} days - The number (integer) of days to be added/subtracted\n * @param {number} weeks - The number (integer) of weeks to be added/subtracted\n * @param {number} months - The number (integer) of months to be added/subtracted\n * @param {number} years - The number (integer) of years to be added/subtracted\n * @returns {Date} The new date\n */export var createDate=function createDate(date,days,weeks,months,years){var newDate=new Date(date);newDate.setDate(newDate.getDate()+days+7*weeks);newDate.setMonth(newDate.getMonth()+months);newDate.setFullYear(newDate.getFullYear()+years);return newDate;};","map":{"version":3,"sources":["C:/Users/hp/Downloads/stock-dashboard-master/stock-dashboard-master/src/utils/helpers/date-helper.js"],"names":["convertDateToUnixTimestamp","date","Math","floor","getTime","convertUnixTimestampToDate","unixTimestamp","milliseconds","Date","toLocaleDateString","createDate","days","weeks","months","years","newDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMA,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAACC,IAAD,CAAU,CAClD,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWF,IAAI,CAACG,OAAL,GAAiB,IAA5B,CAAP,CACD,CAFM,CAIP;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAACC,aAAD,CAAmB,CAC3D,GAAMC,CAAAA,YAAY,CAAGD,aAAa,CAAG,IAArC,CACA,MAAO,IAAIE,CAAAA,IAAJ,CAASD,YAAT,EAAuBE,kBAAvB,EAAP,CACD,CAHM,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACT,IAAD,CAAOU,IAAP,CAAaC,KAAb,CAAoBC,MAApB,CAA4BC,KAA5B,CAAsC,CAC9D,GAAIC,CAAAA,OAAO,CAAG,GAAIP,CAAAA,IAAJ,CAASP,IAAT,CAAd,CACAc,OAAO,CAACC,OAAR,CAAgBD,OAAO,CAACE,OAAR,GAAoBN,IAApB,CAA2B,EAAIC,KAA/C,EACAG,OAAO,CAACG,QAAR,CAAiBH,OAAO,CAACI,QAAR,GAAqBN,MAAtC,EACAE,OAAO,CAACK,WAAR,CAAoBL,OAAO,CAACM,WAAR,GAAwBP,KAA5C,EACA,MAAOC,CAAAA,OAAP,CACD,CANM","sourcesContent":["/**\n * Converts a Date Object to a UNIX timestamp\n * @param {Date} date - The Date Object to be converted\n * @param {number} unixTimestamp The corresponding UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n */\nexport const convertDateToUnixTimestamp = (date) => {\n  return Math.floor(date.getTime() / 1000);\n};\n\n/**\n * Converts a UNIX timestamp to a Date\n * @param {number} unixTimestamp - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n * @returns {string} The corresponding Date Object formatted as a string\n */\nexport const convertUnixTimestampToDate = (unixTimestamp) => {\n  const milliseconds = unixTimestamp * 1000;\n  return new Date(milliseconds).toLocaleDateString();\n};\n\n/**\n * Creates a new date by adding days/weeks/months/years to a given date. Negative values will also work (for past dates)\n * @param {Date} date - The specified date\n * @param {number} days - The number (integer) of days to be added/subtracted\n * @param {number} weeks - The number (integer) of weeks to be added/subtracted\n * @param {number} months - The number (integer) of months to be added/subtracted\n * @param {number} years - The number (integer) of years to be added/subtracted\n * @returns {Date} The new date\n */\nexport const createDate = (date, days, weeks, months, years) => {\n  let newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + days + 7 * weeks);\n  newDate.setMonth(newDate.getMonth() + months);\n  newDate.setFullYear(newDate.getFullYear() + years);\n  return newDate;\n};\n"]},"metadata":{},"sourceType":"module"}