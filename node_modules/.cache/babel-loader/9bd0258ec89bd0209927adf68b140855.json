{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\hp\\\\Downloads\\\\stock-dashboard-master\\\\stock-dashboard-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\hp\\\\Downloads\\\\stock-dashboard-master\\\\stock-dashboard-master\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";var basePath=\"https://finnhub.io/api/v1\";/**\n * Searches best stock matches based on a user's query\n * @param {string} query - The user's query, e.g. 'fb'\n * @returns {Promise<Object[]>} Response array of best stock matches\n */export var searchSymbol=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(query){var url,response,message;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=\"\".concat(basePath,\"/search?q=\").concat(query,\"&token=\").concat(process.env.REACT_APP_API_KEY);_context.next=3;return fetch(url);case 3:response=_context.sent;if(response.ok){_context.next=7;break;}message=\"An error has occured: \".concat(response.status);throw new Error(message);case 7:_context.next=9;return response.json();case 9:return _context.abrupt(\"return\",_context.sent);case 10:case\"end\":return _context.stop();}}},_callee);}));return function searchSymbol(_x){return _ref.apply(this,arguments);};}();/**\n * Fetches the details of a given company\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @returns {Promise<Object>} Response object\n */export var fetchStockDetails=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stockSymbol){var url,response,message;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:url=\"\".concat(basePath,\"/stock/profile2?symbol=\").concat(stockSymbol,\"&token=\").concat(process.env.REACT_APP_API_KEY);_context2.next=3;return fetch(url);case 3:response=_context2.sent;if(response.ok){_context2.next=7;break;}message=\"An error has occured: \".concat(response.status);throw new Error(message);case 7:_context2.next=9;return response.json();case 9:return _context2.abrupt(\"return\",_context2.sent);case 10:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchStockDetails(_x2){return _ref2.apply(this,arguments);};}();/**\n * Fetches the latest quote of a given stock\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @returns {Promise<Object>} Response object\n */export var fetchQuote=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(stockSymbol){var url,response,message;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:url=\"\".concat(basePath,\"/quote?symbol=\").concat(stockSymbol,\"&token=\").concat(process.env.REACT_APP_API_KEY);_context3.next=3;return fetch(url);case 3:response=_context3.sent;if(response.ok){_context3.next=7;break;}message=\"An error has occured: \".concat(response.status);throw new Error(message);case 7:_context3.next=9;return response.json();case 9:return _context3.abrupt(\"return\",_context3.sent);case 10:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchQuote(_x3){return _ref3.apply(this,arguments);};}();/**\n * Fetches historical data of a stock (to be displayed on a chart)\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @param {string} resolution - Resolution of timestamps. Supported resolution includes: 1, 5, 15, 30, 60, D, W, M\n * @param {number} from - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC). Interval initial value.\n * @param {number} to - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC). Interval end value.\n * @returns {Promise<Object>} Response object\n */export var fetchHistoricalData=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(stockSymbol,resolution,from,to){var url,response,message;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:url=\"\".concat(basePath,\"/stock/candle?symbol=\").concat(stockSymbol,\"&resolution=\").concat(resolution,\"&from=\").concat(from,\"&to=\").concat(to,\"&token=\").concat(process.env.REACT_APP_API_KEY);_context4.next=3;return fetch(url);case 3:response=_context4.sent;if(response.ok){_context4.next=7;break;}message=\"An error has occured: \".concat(response.status);throw new Error(message);case 7:_context4.next=9;return response.json();case 9:return _context4.abrupt(\"return\",_context4.sent);case 10:case\"end\":return _context4.stop();}}},_callee4);}));return function fetchHistoricalData(_x4,_x5,_x6,_x7){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/hp/Downloads/stock-dashboard-master/stock-dashboard-master/src/utils/api/stock-api.js"],"names":["basePath","searchSymbol","query","url","process","env","REACT_APP_API_KEY","fetch","response","ok","message","status","Error","json","fetchStockDetails","stockSymbol","fetchQuote","fetchHistoricalData","resolution","from","to"],"mappings":"0UAAA,GAAMA,CAAAA,QAAQ,CAAG,2BAAjB,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,YAAY,0FAAG,iBAAOC,KAAP,2IACpBC,GADoB,WACXH,QADW,sBACUE,KADV,mBACyBE,OAAO,CAACC,GAAR,CAAYC,iBADrC,wBAEHC,CAAAA,KAAK,CAACJ,GAAD,CAFF,QAEpBK,QAFoB,kBAIrBA,QAAQ,CAACC,EAJY,yBAKlBC,OALkB,iCAKiBF,QAAQ,CAACG,MAL1B,OAMlB,IAAIC,CAAAA,KAAJ,CAAUF,OAAV,CANkB,8BASbF,CAAAA,QAAQ,CAACK,IAAT,EATa,8GAAH,kBAAZZ,CAAAA,YAAY,4CAAlB,CAYP;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMa,CAAAA,iBAAiB,2FAAG,kBAAOC,WAAP,+IACzBZ,GADyB,WAChBH,QADgB,mCACkBe,WADlB,mBACuCX,OAAO,CAACC,GAAR,CAAYC,iBADnD,yBAERC,CAAAA,KAAK,CAACJ,GAAD,CAFG,QAEzBK,QAFyB,mBAI1BA,QAAQ,CAACC,EAJiB,0BAKvBC,OALuB,iCAKYF,QAAQ,CAACG,MALrB,OAMvB,IAAIC,CAAAA,KAAJ,CAAUF,OAAV,CANuB,+BASlBF,CAAAA,QAAQ,CAACK,IAAT,EATkB,kHAAH,kBAAjBC,CAAAA,iBAAiB,8CAAvB,CAYP;AACA;AACA;AACA;AACA,GACA,MAAO,IAAME,CAAAA,UAAU,2FAAG,kBAAOD,WAAP,+IAClBZ,GADkB,WACTH,QADS,0BACgBe,WADhB,mBACqCX,OAAO,CAACC,GAAR,CAAYC,iBADjD,yBAEDC,CAAAA,KAAK,CAACJ,GAAD,CAFJ,QAElBK,QAFkB,mBAInBA,QAAQ,CAACC,EAJU,0BAKhBC,OALgB,iCAKmBF,QAAQ,CAACG,MAL5B,OAMhB,IAAIC,CAAAA,KAAJ,CAAUF,OAAV,CANgB,+BASXF,CAAAA,QAAQ,CAACK,IAAT,EATW,kHAAH,kBAAVG,CAAAA,UAAU,8CAAhB,CAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,mBAAmB,2FAAG,kBACjCF,WADiC,CAEjCG,UAFiC,CAGjCC,IAHiC,CAIjCC,EAJiC,+IAM3BjB,GAN2B,WAMlBH,QANkB,iCAMce,WANd,wBAMwCG,UANxC,kBAM2DC,IAN3D,gBAMsEC,EANtE,mBAMkFhB,OAAO,CAACC,GAAR,CAAYC,iBAN9F,yBAOVC,CAAAA,KAAK,CAACJ,GAAD,CAPK,QAO3BK,QAP2B,mBAS5BA,QAAQ,CAACC,EATmB,0BAUzBC,OAVyB,iCAUUF,QAAQ,CAACG,MAVnB,OAWzB,IAAIC,CAAAA,KAAJ,CAAUF,OAAV,CAXyB,+BAcpBF,CAAAA,QAAQ,CAACK,IAAT,EAdoB,kHAAH,kBAAnBI,CAAAA,mBAAmB,0DAAzB","sourcesContent":["const basePath = \"https://finnhub.io/api/v1\";\n\n/**\n * Searches best stock matches based on a user's query\n * @param {string} query - The user's query, e.g. 'fb'\n * @returns {Promise<Object[]>} Response array of best stock matches\n */\nexport const searchSymbol = async (query) => {\n  const url = `${basePath}/search?q=${query}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n\n/**\n * Fetches the details of a given company\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @returns {Promise<Object>} Response object\n */\nexport const fetchStockDetails = async (stockSymbol) => {\n  const url = `${basePath}/stock/profile2?symbol=${stockSymbol}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n\n/**\n * Fetches the latest quote of a given stock\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @returns {Promise<Object>} Response object\n */\nexport const fetchQuote = async (stockSymbol) => {\n  const url = `${basePath}/quote?symbol=${stockSymbol}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n\n/**\n * Fetches historical data of a stock (to be displayed on a chart)\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @param {string} resolution - Resolution of timestamps. Supported resolution includes: 1, 5, 15, 30, 60, D, W, M\n * @param {number} from - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC). Interval initial value.\n * @param {number} to - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC). Interval end value.\n * @returns {Promise<Object>} Response object\n */\nexport const fetchHistoricalData = async (\n  stockSymbol,\n  resolution,\n  from,\n  to\n) => {\n  const url = `${basePath}/stock/candle?symbol=${stockSymbol}&resolution=${resolution}&from=${from}&to=${to}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n"]},"metadata":{},"sourceType":"module"}